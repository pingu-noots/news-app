jsx上で数式、javascriptを書くときは{}を使う

デフォでは全てflexDirection: "colum"

props　親から子コンポーネントに渡すもの。普遍のもの。（this.human: male）

state 可変のもの。(this.human: hungry)

StyleSheetの設定について
{
    flex　余っているスペースを目一杯使う時に使う

    alignItems　flexDirectionの方向に対して調整する

    justifyContent　flexDirectionの方向に対して寄せる、並べる
}

propsの渡し方について
{
    渡す側
        jsxでコンポーネントを挿入しているところで　変数1= 変数2= で渡す

    受ける側
        exportするconstの部分で変数をthisで受けるイメージ
            const Foo = ({ 変数1, 変数2 }) => {}
        jsx内では{変数1}で使用する
}

useStateについて
{
    const [stateの”変数”, 左の変数を更新する”関数”] = useState(初期値)

    ”関数”について値を代入したら”変数”は連動して更新される

    class記述の componentDidMount() に相当する
}

useEffectについて
{
    レンダーの結果が画面に反映された後に動作

    第 2 引数にプロパティを指定して、そのプロパティが変化した場合のみ実行させることも可能

    第 2 引数に殻の配列を渡した場合はマウント時に実行される。デバックに使えるね。
}

react nativeでのapi定義場所について
{
    app.jsonで "extra": {"aaa": "foo"} のように好きなパラメータ(今回はapi)を定義でき、アプリで呼び出せる

    expo-constantsでアプリ内から呼び出す

    でもgithubに上げたい時は。。。
    {
        yarn add -D react-native-dotenv

        babel.config.jsを修正

        .envを作成し、そこにAPIKeyを記入

        .gitignoreに.envを追加

        import { API_KEY } from '@env'

        再起動
    }

}

jsxでのtrue false判定
{
    {!! 判定式}で実装
}

rnfでreactのデフォ呼び出し


タップ時の画面遷移の実装方法
{
    親コンポーネントに
        const Stack = createNativeStackNavigator()定義
        <NavigationContainer>をjsxに入れる
        <Stack.Navigator>内で
            <Stack.Screen name="Article" component={AriticleScreen} />のように子コンポーネントをスタックさせていく
        https://reactnavigation.org/docs/native-stack-navigator/

    タップ対象の孫コンポーネントに
        コンポーネント全体を<TouchableOpacity>にする

    孫コンポーネントがある子コンポーネントに
        export default foo = ({navigation}) でpropsを受け取る
        onPress={() => navigation.navigate('Article', { article: item })}で処理を実装
        navigate()の第一引数は親コンポーネントにstackさせた時のname、第二引数は{ props名: 対象}

    遷移先子コンポーネントに
        export default foo = ({props名}})でprops名を受け取る
        好きに対象を使う
}

画面遷移の構成方法




remoteとlocalのgitの紐付け　git remote add origin URL